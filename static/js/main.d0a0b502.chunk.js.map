{"version":3,"sources":["components/Tag.tsx","components/Tags.tsx","components/TodoModal.tsx","components/SortModal.tsx","components/Fader.tsx","components/Task.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Tag","title","color","removeTag","className","style","backgroundColor","onClick","e","preventDefault","Tags","props","taskTags","map","elem","val","i","hash","length","charCodeAt","hashString","TodoModal","useState","current","name","setName","currTag","setCurrTag","currColor","setCurrColor","canSubmit","setCanSubmit","tagList","tags","setTags","dueDate","date","setDate","dateInputType","setDateInputType","type","value","onChange","target","required","find","removedTag","updatedTags","filter","isNaN","Date","getDate","onFocus","onBlur","undefined","taskKey","key","getTime","submit","completed","SortModal","sorting","setSorting","changeManager","sortDate","sortCompleted","sortTag","sortManager","Fader","delay","fadeIn","state","fade","fadeProp","setFadeProp","useEffect","timeout","setTimeout","clearTimeout","content","Task","editingTodo","setEditingTodo","modTodo","task","editTodo","tasks","completeTodo","editHandler","removeTodo","tag","index","TodoList","todos","setTodos","Map","allTags","setAllTags","filterTag","setFilterTag","buttonPressed","isButtonPressed","activateModal","setActivateModal","updatedTodos","todo","sorted","testTodo","oldIndex","test","findIndex","oldTodo","console","log","newTags","x","includes","forEach","reducedArray","get","delete","set","conditions","sortedTasks","sort","a","b","valueOf","timer","newTodos","todoIndex","item","unsortedTodos","prev","removedArr","defaultProps","App","backgroundImage","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0a0b502.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Task.css\";\r\n\r\nfunction Tag({ title, color, removeTag }: { title: string, color: string, removeTag: any }) {\r\n    const handleRemoveTag = (e: React.MouseEvent) => {\r\n        e.preventDefault();\r\n        removeTag(title);\r\n    }\r\n\r\n\treturn (\r\n\t\t<div className=\"tag-wrapper\" style={{backgroundColor: `${color}`}}>\r\n\t\t\t<p className=\"tag-title\">{title}&nbsp;</p>\r\n\t\t\t<button className=\"tag-button\" onClick={handleRemoveTag}><i className=\"fas fa-times\"></i></button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Tag;\r\n","import Tag from \"./Tag\";\r\nimport \"./Task.css\";\r\nimport { TaskTag } from \"./TodoList\";\r\n\r\ninterface TagTitle {\r\n\ttaskTags: TaskTag[];\r\n\tremoveTag: (n: string) => any;\r\n}\r\n\r\nfunction Tags(props: TagTitle) {\r\n\tconst hashString = (val: string): number => {\r\n\t\tlet hash = 0,\r\n\t\t  i,\r\n\t\t  chr;\r\n\t\tif (val.length === 0) return hash;\r\n\t\tfor (i = 0; i < val.length; i++) {\r\n\t\t  chr = val.charCodeAt(i);\r\n\t\t  hash = (hash << 5) - hash + chr;\r\n\t\t  hash |= 0;\r\n\t\t}\r\n\t\treturn hash;\r\n\t  };\r\n\r\n\treturn (\r\n\t\t<div className=\"tags-container\">\r\n\t\t\t{props.taskTags &&\r\n\t\t\t\tprops.taskTags.map((elem) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Tag key={hashString(elem.title)} title={elem.title} color={elem.color} removeTag={props.removeTag}></Tag>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Tags;\r\n","import React, { useState } from \"react\";\r\nimport Tags from \"./Tags\";\r\nimport \"./TodoModal.css\";\r\nimport { TaskTag } from \"./TodoList\";\r\n\r\nexport default function TodoModal(props: any) {\r\n  const [name, setName] = useState(props.current ? props.current.title : '');\r\n  const [currTag, setCurrTag] = useState({title: \"\", color: \"#3ecbd0\"});\r\n  const [currColor, setCurrColor] = useState(props.current ? props.current.color : \"#81e7e4\");\r\n  const [canSubmit, setCanSubmit] = useState<boolean[]>(\r\n    props.current ? [true, true] : [false, false]\r\n  );\r\n  const [tags, setTags] = useState<TaskTag[]>( // if this is an edit modal, properities need to be taken from old tasks\r\n    props.current ? props.current.tagList : []\r\n  );\r\n  const [date, setDate] = useState(props.current ? props.current.dueDate : \"\");\r\n  const [dateInputType, setDateInputType] = useState(\"text\");\r\n\r\n  const hashString = (val: string): number => {\r\n    let hash = 0,\r\n      i,\r\n      chr;\r\n    if (val.length === 0) return hash;\r\n    for (i = 0; i < val.length; i++) {\r\n      chr = val.charCodeAt(i);\r\n      hash = (hash << 5) - hash + chr;\r\n      hash |= 0;\r\n    }\r\n    /* We want to have the keys equal the value plus date, if user tries to make \r\n    a duplicate we will test for it AFTER they hit the submit button, then which\r\n    if the duplicate task is marked as completed we will uncomplete it OR do\r\n    nothing, then afterr both we will throw out the task */\r\n    hash += new Date(date).getTime();\r\n    return hash;\r\n  };\r\n\r\n  const removeTag = (removedTag: string): void => {\r\n    const updatedTags = [...tags].filter((elem) => elem.title !== removedTag);\r\n    setTags(updatedTags);\r\n  };\r\n\r\n  const submitTag = (e: React.MouseEvent): void => {\r\n    e.preventDefault();\r\n\r\n    if (currTag.title && !tags.find((elem) => elem.title === currTag.title)) {\r\n      setTags([currTag, ...tags]);\r\n    }\r\n    setCurrTag({title: \"\", color: currTag.color});\r\n  };\r\n\r\n  const submitTodo = (e: React.MouseEvent): void => {\r\n    e.preventDefault();\r\n\r\n    let taskKey;\r\n\r\n    if (props.current) {\r\n      taskKey = props.current.key;\r\n    } else {\r\n      taskKey = hashString(name);\r\n    }\r\n\r\n    props.submit({\r\n      key: taskKey,\r\n      title: name,\r\n      dueDate: date,\r\n      tagList: tags,\r\n      color: currColor,\r\n      completed: false,\r\n    });\r\n    setTags([]);\r\n    setCurrTag({title: \"\", color: currTag.color});\r\n    setName(\"\");\r\n    setDate(\"\");\r\n    setDateInputType(\"text\");\r\n    setCanSubmit([false, false]);\r\n  };\r\n\r\n  return (\r\n    <form className=\"modal-space\">\r\n      <div className=\"textbox-wrapper\">\r\n        <input\r\n          type=\"input\"\r\n          value={name}\r\n          onChange={(e) => {\r\n            setName(e.target.value);\r\n            if (e.target.value.length > 0) {\r\n              setCanSubmit([true, canSubmit[1]]);\r\n            } else {\r\n              setCanSubmit([false, canSubmit[1]]);\r\n            }\r\n          }}\r\n          required // enables the animation for the description of each line\r\n        />\r\n        <label>Task</label>\r\n        <div className=\"select-color-text\">\r\n          Task color\r\n        </div>\r\n        <input className=\"tag-color-picker\" type=\"color\" value={currColor} onChange={(e) => setCurrColor(e.target.value)} />\r\n      </div>\r\n      <div className=\"textbox-wrapper tags\">\r\n        <input\r\n          type=\"input\"\r\n          value={currTag.title}\r\n          onChange={(e) => setCurrTag({title: e.target.value, color: currTag.color})}\r\n          required // enables the animation for the description of each line\r\n        />\r\n        <label>Tags</label>\r\n        <button onClick={submitTag} className=\"text-btn\">\r\n          <p className=\"create-tag-text\">\r\n            Create tag <i className=\"fas fa-pen\"></i>\r\n          </p>\r\n        </button>\r\n        <input className=\"tag-color-picker\" type=\"color\" value={currTag.color} onChange={(e) => setCurrTag({title: currTag.title, color: e.target.value})} />\r\n      </div>\r\n      <Tags taskTags={tags} removeTag={removeTag} />\r\n      <div className=\"textbox-wrapper date\">\r\n        <input\r\n          type={dateInputType}\r\n          value={date}\r\n          onChange={(e) => {\r\n            setDate(e.target.value);\r\n            // tests for an issue of tabbing causing the text and date to overlap\r\n            if (e.target.value.length > 0) {\r\n              if (!isNaN(new Date(e.target.value).getDate())) {\r\n                // tests if date is valid\r\n                setCanSubmit([canSubmit[0], true]);\r\n              } else {\r\n                setCanSubmit([canSubmit[0], false]);\r\n              }\r\n            } else {\r\n              setCanSubmit([canSubmit[0], false]);\r\n            }\r\n          }}\r\n          className=\"textbox-date\"\r\n          onFocus={() => setDateInputType(\"date\")}\r\n          // this ensures that the text input and date input never overlap\r\n          onBlur={canSubmit[1] ? undefined : () => setDateInputType(\"text\")}\r\n          required // enables the animation for the description of each line\r\n        ></input>\r\n        <label>Due Date</label>\r\n      </div>\r\n      <input\r\n        type=\"submit\"\r\n        onClick={submitTodo}\r\n        className={\r\n          // ensures that conditions are met before allowing submission with CSS\r\n          canSubmit[0] && canSubmit[1]\r\n            ? \"text-btn submit\"\r\n            : \"text-btn locked submit\"\r\n        }\r\n        value={props.current ? \"Edit\" : \"Create\"}\r\n      ></input>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport \"./SortModal.css\";\r\n\r\nexport default function SortModal(props: {sortManager:(a:boolean, b:boolean, c:string) => void}) {\r\n    const [sorting, setSorting] = useState<any[]>([false, false, \"\"]);\r\n\r\n    const changeManager = (sortDate: boolean, sortCompleted: boolean, sortTag:string) => {\r\n        setSorting([sortDate, sortCompleted, sortTag]);\r\n        props.sortManager(sortDate, sortCompleted, sortTag);\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"sort-wrapper\">\r\n                <h4>Sort by date</h4>\r\n                <div className=\"toggle-wrapper\">\r\n                    <div className=\"toggle\">\r\n                        <input onChange={() => changeManager(!sorting[0], sorting[1], sorting[2])} type=\"checkbox\" />\r\n                        <label />\r\n                    </div>\r\n                </div>\r\n                <h4>Sort by completed</h4>\r\n                <div className=\"toggle-wrapper\">\r\n                    <div className=\"toggle\">\r\n                        <input onChange={() => changeManager(sorting[0], !sorting[1], sorting[2])} type=\"checkbox\" />\r\n                        <label />\r\n                    </div>\r\n                </div>\r\n                <h4>Sort by tag:</h4>\r\n                <div className=\"line-wrapper\">\r\n                    <input onChange={(e) => changeManager(sorting[0], sorting[1], e.target.value)} type=\"input\" />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React, {useState, useEffect } from 'react'\r\nimport \"./TodoList.css\";\r\n\r\nexport default function Fader(props: any) {\r\n    let activate = true; // will try to make the reverse animation as well\r\n    const delay = props.delay;\r\n    const fadeIn = props.state;\r\n    const [fadeProp, setFadeProp] = useState({\r\n        // fade delay is for keeping elements invisible at the initial render\r\n        // elements will be changed later in the useEffect\r\n        fade: (fadeIn ? \"fade out\" : \"fade delay\"), \r\n    });\r\n    \r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            if (fadeIn) { // Allows parents to control the fade properties\r\n                setFadeProp({fade: 'fade in'});\r\n            } else {\r\n                setFadeProp({fade: 'fade out'});\r\n            }\r\n            \r\n        }, (fadeIn ? delay : 0)); // makes sure there is no delay on fade out\r\n        return () => clearTimeout(timeout);\r\n    }, [delay, fadeIn, activate]); // fadeIn allows outside communication\r\n    \r\n    return (\r\n        <section className={fadeProp.fade}>\r\n            {props.content}\r\n        </section>\r\n    )\r\n}\r\n\r\nFader.defaultProps = {\r\n    state: true,\r\n    delay: 0\r\n}","import React, { useState } from \"react\";\r\nimport { TodoItem } from \"./TodoList\";\r\nimport TodoModal from \"./TodoModal\";\r\nimport \"./TodoList.css\";\r\nimport \"./Task.css\";\r\nimport Fader from \"./Fader\";\r\n\r\ninterface TaskProps {\r\n  tasks: TodoItem[];\r\n  editTodo: any;\r\n  completeTodo: any;\r\n  removeTodo: any;\r\n}\r\n\r\nexport default function Task(props: TaskProps) {\r\n  const [editingTodo, setEditingTodo] = useState<TodoItem | undefined>(\r\n    undefined // this stores a task that is currently being edited or undefined\r\n  );\r\n\r\n  // called when the edited todo is submitted,\r\n  const modTodo = (task: TodoItem) => {\r\n    props.editTodo(task.key, task);\r\n    setEditingTodo(undefined);\r\n  };\r\n\r\n  // takes in a task, assigns it to editingTodo and cancels early if the given task is already complete\r\n  const editHandler = (task: TodoItem): void => {\r\n    // a call to edit a specific task\r\n    if (task.completed) return; // returns if no task is defined\r\n    setEditingTodo(task); // sets the task to be edited\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-wrapper\">\r\n      {props.tasks &&\r\n        props.tasks.map((task) => {\r\n          if (editingTodo && task.key === editingTodo.key) {\r\n            // if edit mode is active, display the edit modal\r\n            return (\r\n              <div className=\"modal edit\" key={task.key}>\r\n                <Fader\r\n                  content={<TodoModal current={editingTodo} submit={modTodo} />}\r\n                />\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div\r\n                style={{backgroundColor: `${task.color}`}}\r\n                className={task.completed ? \"task complete\" : \"task\"}\r\n                key={task.key}\r\n              >\r\n                <div className=\"inner-task\">\r\n                  <div className=\"task-top\">\r\n                    <div\r\n                      className=\"task-text\"\r\n                      onClick={() => props.completeTodo(task.key)}\r\n                    >\r\n                      <h2 className=\"task-title\">\r\n                        {task.title}\r\n                        <label className=\"menu-icon accept\">\r\n                          <i\r\n                            className={\r\n                              task.completed\r\n                                ? \"far fa-check-square\"\r\n                                : \"far fa-square\"\r\n                            }\r\n                          ></i>\r\n                        </label>\r\n                      </h2>\r\n                      <p className=\"task-dueDate\">{task.dueDate}</p>\r\n                    </div>\r\n                    <div className=\"menu\">\r\n                      <div\r\n                        className={\r\n                          task.completed ? \"menu-icon grayed\" : \"menu-icon edit\"\r\n                        }\r\n                      >\r\n                        <p\r\n                          onClick={\r\n                            () =>\r\n                              editHandler(\r\n                                task\r\n                              ) /* goes into edit mode for the task */\r\n                          }\r\n                        >\r\n                          <i className=\"fas fa-edit\"></i>\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"menu-icon delete\">\r\n                        <p onClick={() => props.removeTodo(task.key)}>\r\n                          <i className=\"fas fa-trash-alt\"></i>\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"tags-container\">\r\n                    {task.tagList.map((tag, index) => {\r\n                      return (\r\n                        <div key={index} style={{backgroundColor: `${tag.color}`}} className=\"tag-wrapper\">\r\n                          <h5 className=\"tag-title\">{tag.title}</h5>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./TodoList.css\";\r\nimport TodoModal from \"./TodoModal\";\r\nimport SortModal from \"./SortModal\";\r\nimport Task from \"./Task\";\r\nimport Fader from \"./Fader\";\r\n\r\n/**\r\n * Thank you for applying to Bits of Good. You are free to add/delete/modify any\r\n * parts of this project. That includes changing the types.ts, creating css files,\r\n * modifying import statements, using contexts, etc. We do recommend to keep it simple.\r\n * You will not be judged based on complexity. We also recommend using\r\n * multiple components instead of coding everything on this file :)\r\n *\r\n * Have fun! Please reach out to hello@bitsofgood.org or wkim330@gatech.edu if you\r\n * have any questions!\r\n *\r\n * Bits of Good Engineering Team\r\n *\r\n */\r\n// TODO: Start coding from here\r\n\r\n// Here's a baseline todo item type.\r\n// Feel free to extend or create your own interface!\r\nexport type TaskTag = {\r\n  title: string;\r\n  color: string;\r\n}\r\n\r\nexport type TodoItem = {\r\n  key: number;\r\n  title: string;\r\n  color: string;\r\n  dueDate: Date;\r\n  tagList: TaskTag[];\r\n  completed: boolean;\r\n};\r\n\r\nexport default function TodoList() {\r\n  const [todos, setTodos] = useState<TodoItem[]>([]);\r\n  const [allTags, setAllTags] = useState(new Map());\r\n  const [filterTag, setFilterTag] = useState(\"\");\r\n  const [buttonPressed, isButtonPressed] = useState(false);\r\n  const [activateModal, setActivateModal] = useState(false);\r\n  const [sorting, setSorting] = useState<boolean[]>([false, false]);\r\n\r\n  const addTodo = (todo: TodoItem) => {\r\n    // tests for vulnerabilities or duplicates\r\n    if (testTodo(todo, -1)) return;\r\n\r\n    const newTodos = [todo, ...todos] as TodoItem[];\r\n    setTodos(sorted(sorting, newTodos));\r\n    isButtonPressed(false);\r\n  };\r\n\r\n  const editTodo = (key: number, todo: TodoItem): void => {\r\n    let todoIndex:number = todos.findIndex((item) => item.key === key);\r\n    // tests for vulnerabilities or duplicates\r\n    if (testTodo(todo, todoIndex)) return;\r\n\r\n    let unsortedTodos = todos;\r\n\r\n    unsortedTodos[todoIndex] = todo;\r\n\r\n    setTodos((prev) => {\r\n      return sorted(\r\n        sorting,\r\n        unsortedTodos\r\n      );\r\n    });\r\n  };\r\n\r\n  const removeTodo = (key: number): void => {\r\n    const removedArr = [...todos].filter((todo) => todo.key !== key);\r\n    setTodos(removedArr);\r\n  };\r\n\r\n  const completeTodo = (key: number): void => {\r\n    let updatedTodos = todos.map((todo) => {\r\n      if (todo.key === key) {\r\n        todo.completed = !todo.completed;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(sorted(sorting, updatedTodos));\r\n  };\r\n\r\n/*  todo is the todo needed to be tested, isNew is the bool\r\n    used to determine if the second test, the duplicate todo\r\n    test, is run. It is not run if we are dealing with old\r\n    todos that are being edited, as they will show up as\r\n    duplicates. */\r\n  const testTodo = (todo: TodoItem, oldIndex: number): boolean => {\r\n    // removes a point of injection within titles\r\n    if (/^\\s*$/.test(todo.title)) {\r\n      return true;\r\n    }\r\n\r\n    if (oldIndex < 0) { // run if the todo is new\r\n      // if this is a duplicated todo, we need to throw it out\r\n      let index = todos.findIndex((oldTodo) => oldTodo.key === todo.key);\r\n      if (index > 0) {\r\n        // we will mark the old todo as incomplete if a dup is made BUT ONY IF THIS IS FROM ADDTODO\r\n        if (todos[index].completed) completeTodo(todo.key);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (oldIndex >= 0) {\r\n      console.log(\"lmao\");\r\n      let newTags = allTags;\r\n\r\n      let difference = todos[oldIndex].tagList.filter(x => !todo.tagList.includes(x));\r\n      difference.forEach((tag) => {\r\n        // deletes the todo from the tags that it is listed under that are no longer there\r\n        let reducedArray:TodoItem[] = newTags.get(tag.title).filter((x:TodoItem) => x.title !== todo.title);\r\n        if (reducedArray.length < 1) {\r\n          newTags.delete(tag.title);\r\n        } else {\r\n          newTags.set(tag.title, reducedArray);\r\n        }\r\n      });\r\n      setAllTags(newTags);\r\n\r\n      let difference2 = todo.tagList.filter(x => !todos[oldIndex].tagList.includes(x));\r\n      difference2.forEach((tag) => {\r\n        // removes a point of injection within tags\r\n        if (/^\\s*$/.test(tag.title)) return true;\r\n\r\n        // for later searching, adds the todo to a map\r\n        if (!newTags.get(tag.title)) { // how we will be later searching for tags\r\n          setAllTags(newTags.set(tag.title, [todo]));\r\n        } else {\r\n          setAllTags(newTags.set(tag.title, [...newTags.get(tag.title), todo]));\r\n        }\r\n      });\r\n    } else {\r\n      todo.tagList.forEach((tag) => {\r\n        // removes a point of injection within tags\r\n        if (/^\\s*$/.test(tag.title)) return true;\r\n\r\n        // for later searching, adds the todo to a map\r\n        if (!allTags.get(tag.title)) { // how we will be later searching for tags\r\n          setAllTags(allTags.set(tag.title, [todo]));\r\n        } else {\r\n          setAllTags(allTags.set(tag.title, [...allTags.get(tag.title), todo]));\r\n        }\r\n      });\r\n    }\r\n    console.log(allTags);\r\n\r\n    return false;\r\n  };\r\n\r\n\r\n  const buttonHandler = () => {\r\n    isButtonPressed(!buttonPressed);\r\n    if (!buttonPressed) {\r\n      setActivateModal(true);\r\n    }\r\n  };\r\n\r\n\r\n  const sortManager = (sortDate: boolean, sortCompleted: boolean, sortTag: string) => {\r\n    if (sortTag !== filterTag) {\r\n      setFilterTag(sortTag);\r\n    } \r\n    if (sortDate !== sorting[0] || sortCompleted !== sorting[1]) {\r\n      setTodos(sorted([sortDate, sortCompleted], todos));\r\n      setSorting([sortDate, sortCompleted]);\r\n    }\r\n  };\r\n\r\n\r\n  function filterUntagged ():TodoItem[] {\r\n    return sorted(sorting, allTags.get(filterTag));\r\n  }\r\n\r\n\r\n  function sorted(conditions: boolean[], tasks: TodoItem[]): any {\r\n    if (!tasks || tasks.length < 2) {\r\n      // if there are less than 2 tasks, there is no point in sorting them\r\n      return tasks;\r\n    }\r\n    \r\n    let sortedTasks = tasks;\r\n\r\n    if (conditions[0]) {\r\n      // sort by date\r\n      sortedTasks.sort((a, b) => {\r\n        return new Date(a.dueDate).valueOf() - new Date(b.dueDate).valueOf();\r\n      });\r\n    }\r\n\r\n    if (conditions[1]) {\r\n      // sort by completed, with incomplete set in front\r\n      sortedTasks.sort((a, b) => {\r\n        if (a.completed === b.completed) {\r\n          return 0;\r\n        } else {\r\n          if (a.completed) return 1;\r\n          else return -1;\r\n        }\r\n      });\r\n    }\r\n\r\n    return sortedTasks;\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    const timer = activateModal\r\n      ? undefined\r\n      : setTimeout(() => {\r\n          setActivateModal(false);\r\n        }, 300);\r\n    return () => {\r\n      clearTimeout(timer as NodeJS.Timeout);\r\n    };\r\n  }, [activateModal]);\r\n\r\n  \r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"modal-border-wrapper\">\r\n        <div className={buttonPressed ? \"modal-border active\" : \"modal-border\"}>\r\n          <div className=\"modal-content-initial\">\r\n            <h1>What's on your mind?</h1>\r\n            <button onClick={buttonHandler} className=\"icon-btn\">\r\n              <div className=\"create-todo-btn\">\r\n                <i\r\n                  className={\r\n                    buttonPressed ? \"fas fa-times-circle\" : \"fas fa-plus-circle\"\r\n                  }\r\n                ></i>\r\n              </div>\r\n            </button>\r\n          </div>\r\n          {activateModal && (\r\n            <div // this is the task entry modal; it has a class t/f to add a small animation\r\n              className={buttonPressed ? \"modal entry active\" : \"modal entry\"}\r\n            >\r\n              <Fader\r\n                state={buttonPressed}\r\n                delay={120}\r\n                content={<TodoModal submit={addTodo} />}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <Fader\r\n        state={(todos.length > 1)} // if there are todos, they need to be sorted\r\n        delay={120}\r\n        content={<SortModal sortManager={sortManager} />}\r\n      />\r\n      <section className=\"tasklist\">\r\n        <Task\r\n          tasks={(filterTag.length > 0) ? filterUntagged() : todos}\r\n          editTodo={editTodo}\r\n          completeTodo={completeTodo}\r\n          removeTodo={removeTodo}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={{backgroundImage: `url(${process.env.PUBLIC_URL+ \"/images/layer2.svg\"})`}} className=\"App\">\r\n      <TodoList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}